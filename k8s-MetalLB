# Install and configure MetalLB
https://metallb.universe.tf/installation/

# IP address calculation 
$ sipcalc 10.1.13.0/24
$ sipcalc 10.1.13.0/16
$ sipcalc 10.1.13.0/8

# Check the kube-proxy mode and set the values for strictARP 
(Example: if mode: "" then strictARP: "false" // if mode: "ipvs" then strictARP: "true")
$ kubectl edit configmap -n kube-system kube-proxy

apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: "ipvs"
ipvs:
  strictARP: true
  
# Install metallb
$ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.9/config/manifests/metallb-native.yaml

$ kubectl get ns
$ kubectl get po -n metallb-system

# Create MetalLB IPPools
$ kubectl apply -f IPPool.yaml

apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: first-pool
  namespace: metallb-system
spec:
  addresses:
  - 192.168.1.240-192.168.1.250
  
  
$ kubeclt get IPAddressPool

# Configure the L2Advertisement 

...
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: l2advertisement
  namespace: metallb-system
spec:
  ipAddressPools:
   - first-pool
...



Example:
...
apiVersion: metallb.io/v1alpha1
kind: AddressPool
metadata:
  namespace: metallb-system
  name: doc-example
spec:
  protocol: layer2
  addresses:
  - 192.168.1.10-192.168.1.20
...

  
# Create a demo application and test the connectivity

$ kubectl create -f deployment.yaml
$ kubectl create -f service.yaml (service Type: LoadBalancer)
$ kubectl get svc (get the svc external IP)
$ curl <external-IP:port>/10.1.10.100:80


# Troubleshooting. If its not woking 
# get the SVC externalIP
# add above external IP to node interface

$ kubectl get svc
$ ssh node
$ ip addr add 10.1.10.100/24 dev ens192

$ curl 10.1.10.100:80




