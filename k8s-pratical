# Create a pod name nginx and add label app=green
$ k run --help
$ k create nginx --image=nginx:latest --labels="app=green"

# Create a service name demo with port 8080
$ k create service --help
$ k create service clusterip demo-svc --port=80:80 (need to edit svc and add the selector app=nginx )
$ k expose po nginx --port 8080 --target-port 80 --name demo-02-svc






ETCD Backup and Restore:
-----------------------
Note: For ETCD backup, its require cert and keyfile. but restore its really not require
$ etcdctl snapshot --help

$ cat /etc/kubernetes/mainfest/kube-apiserver.yaml  (get the etcd cert, endpoints details)
$ cat /etc/kubernetes/mainfest/etcd.yaml            (get the etcd cert, endpoints details)

$ etcdctl --endpoints <endpoint-ip:port> --cacert="" --cert="" --key="" snapshot save /opt/today.db

$ etcdctl --write-out=table snapshot status /opt/today.db

$ etcdctl snapshot restore --data-dir /var/lib/1st-etcd-backup /opt/today.db 
$ ll /var/lib/1st-etcd-backup 
$ vi /etc/kubernetes/manifest/etcd.yaml
   hostPath:
      path: /var/lib/1st-etcd-backup
      

Note: If Etcd is running as a systemd
   1) Take backup using same above command
   2) $ rm -rf /var/lib/etcd/*
   3) etcdctl snapshot restore --data-dir=/var/lib/etcd /opt/today.db
   4) $ systemctl restart etcd


      
  

Role and Rolebinding:
---------------------
$ kubectl create role --help
$ kubectl crate role developer --verb=crate,get,list,update,delete --resource=pod -n demo
$ kubectl describe role developer -n demo

$ kubectl auth --help
$ kubectl auth can-i --help
$ kubectl auth can-i get pods -n demo --as john
$ kubectl auth can-i create pods -n demo --as john
$ kubectl auth can-i watch pods -n demo --as john

$ kubectl create rolebinding --help
$ kubectl create rolebinding john-developer --role=developer --user=john -n demo
$ kubectl describe rolebinding john-developer -n demo

$ kubectl auth can-i create pods -n demo --as john
$ kubectl auth can-i watch pods -n demo --as john


Service accout:
$ kubectl create sa demo-sa
$ kubectl create clusterrole pv-role --verb=get --resource=persistentvolumes 
$ kubectl create clusterrolebinding pv-binding --clusterrole=pv-role --serviceaccount=<namespace>:sa-name

$ kubectl run pv-viewer --image=radis --serviceaccount=demo-sa





Json Query:
-----------
$ kc get no -ojson
$ kc get no -o jsonpath='{.items[*].status.nodeInfo}'
$ kc get no -o jsonpath='{.items[*].status.nodeInfo.osImage}'

$ kc get no -o jsonpath='{.items[*].status.capacity.cpu}'


$ kc get no -o jsonpath='{.item[*].status.addresses[*].address}'
$ kc get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'





